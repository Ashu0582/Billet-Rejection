function formatGTSSheet() {
  startDeleteCopyPaste();
  evaluateRagStatus();
  sorting();
  mergeSameIncidents();
}

function startDeleteCopyPaste() {
  var sheetFormatted = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Formatted');
  var sheetRaw = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Raw');
  
  sheetFormatted.clear();
  
  var rangeRaw = sheetRaw.getDataRange();
  rangeRaw.copyTo(sheetFormatted.getRange(1, 1));
  
  sheetFormatted.deleteColumn(4); // Delete column D
  
  dateConvert();
}

function dateConvert() {
  var sheetFormatted = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Formatted');
  
  sheetFormatted.getRange('N1').setValue('Idate');
  sheetFormatted.getRange('O1').setValue('AID');
  sheetFormatted.getRange('P1').setValue('ACD');
  sheetFormatted.getRange('Q1').setValue('Status');
  
  var lastRow = sheetFormatted.getLastRow();
  
  for (var i = 2; i <= lastRow; i++) {
    sheetFormatted.getRange('O' + i).setFormula('=DAY(A' + i + ')');
    sheetFormatted.getRange('P' + i).setFormula('=MONTH(A' + i + ')');
    sheetFormatted.getRange('Q' + i).setFormula('=YEAR(A' + i + ')');
    sheetFormatted.getRange('N' + i).setFormula('=DATE(Q' + i + ', P' + i + ', O' + i + ')');
  }
  
  var rangeToCopy = sheetFormatted.getRange('N2:Q' + lastRow);
  rangeToCopy.copyTo(rangeToCopy, { contentsOnly: true });
  
  sheetFormatted.getRange('O2:R' + lastRow).clearContent();
}

function mergeSameIncidents() {
  var sheetFormatted = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Formatted');
  var lastRow = sheetFormatted.getLastRow();
  var startRangeRow = 2;
  var saveTicketNo = sheetFormatted.getRange('A2').getValue();
  
  for (var i = 2; i <= lastRow; i++) {
    var checkTicketNo = sheetFormatted.getRange('A' + i).getValue();
    
    if (checkTicketNo !== saveTicketNo) {
      var endRangeRow = i - 1;
      mergintons(sheetFormatted, startRangeRow, endRangeRow);
      startRangeRow = i;
      saveTicketNo = checkTicketNo;
    }
  }
  
  mergintons(sheetFormatted, startRangeRow, lastRow);
}

function mergintons(sheet, startRangeRow, endRangeRow) {
  var rangeStringA = 'A' + startRangeRow + ':A' + endRangeRow;
  mergeAndCentre(sheet.getRange(rangeStringA));
  
  var rangeStringB = 'B' + startRangeRow + ':B' + endRangeRow;
  mergeAndCentre(sheet.getRange(rangeStringB));
  
  var rangeStringC = 'C' + startRangeRow + ':C' + endRangeRow;
  mergeAndCentre(sheet.getRange(rangeStringC));
}

function mergeAndCentre(range) {
  range.merge();
  range.setHorizontalAlignment('center');
  range.setVerticalAlignment('middle');
}

function evaluateRagStatus() {
  var sheetFormatted = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Formatted');
  var lastRow = sheetFormatted.getLastRow();
  
  for (var i = 2; i <= lastRow; i++) {
    if (sheetFormatted.getRange('E' + i).getValue().startsWith('Open')) {
      var rangeString = 'D' + i + ':M' + i;
      var status = sheetFormatted.getRange('K' + i).getValue();
      
      if (status === 'Green') {
        sheetFormatted.getRange(rangeString).setBackground('#00FF00'); // Good
      } else if (status === 'Amber') {
        sheetFormatted.getRange(rangeString).setBackground('#FFFF00'); // Neutral
      } else if (status === 'Red') {
        sheetFormatted.getRange(rangeString).setBackground('#FF0000'); // Bad
      }
    }
  }
  
  sheetFormatted.deleteColumn(11); // Delete column K
}

function sorting() {
  var sheetFormatted = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Formatted');
  var range = sheetFormatted.getRange('A1:ES' + sheetFormatted.getLastRow());
  
  range.sort([{ column: 13, ascending: true }, { column: 1, ascending: true }, { column: 14, ascending: true }, { column: 15, ascending: true }, { column: 16, ascending: true }]);
  
  sheetFormatted.deleteColumns(13, 4); // Delete columns M:P
}
